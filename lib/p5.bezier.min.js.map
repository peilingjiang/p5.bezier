{"version":3,"file":"p5.bezier.min.js","mappings":"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","sources":["webpack://p5bezier/webpack/universalModuleDefinition","webpack://p5bezier/webpack/bootstrap","webpack://p5bezier/webpack/runtime/define property getters","webpack://p5bezier/webpack/runtime/hasOwnProperty shorthand","webpack://p5bezier/webpack/runtime/make namespace object","webpack://p5bezier/./src/p5.bezier.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"p5bezier\"] = factory();\n\telse\n\t\troot[\"p5bezier\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\np5.bezier library by Peiling Jiang\n2020\n*/\n\nconst p5bezierAccuracyListAll = [\n  0.2, 0.1, 0.05, 0.04, 0.02, 0.01, 0.008, 0.002, 0.001, 0.0005, 0.0001,\n]\n\nlet _canvas,\n  _ctx,\n  _dimension,\n  _strict,\n  _useP5,\n  _beginPath,\n  _moveTo,\n  _lineTo,\n  _closePath\n\nexport function initBezier(canvas, strictMode = false) {\n  _canvas = canvas\n  _ctx = _canvas.drawingContext\n\n  // eslint-disable-next-line no-undef\n  if (p5 && canvas instanceof p5.Graphics) {\n    // p5 graphics\n    _useP5 = true\n    _dimension = _ctx.constructor.name === 'WebGLRenderingContext' ? 3 : 2\n\n    _beginPath = _canvas.beginShape\n    _moveTo = _canvas.vertex\n    _lineTo = _canvas.vertex\n    _closePath = _canvas.endShape\n    // eslint-disable-next-line no-undef\n  } else if ((p5 && canvas instanceof p5.Renderer) || canvas.drawingContext) {\n    // p5 canvas or other canvas\n    // eslint-disable-next-line no-undef\n    if (!p5 || (p5 && !(canvas instanceof p5.Renderer))) {\n      window.console.warn(\n        '[p5.bezier] Support for non-p5 canvas is not tested.'\n      )\n      _dimension = canvas.isP3D ? 3 : 2\n    } else {\n      _dimension = _ctx.constructor.name === 'WebGLRenderingContext' ? 3 : 2\n    }\n    _useP5 = false\n    _dimension = _ctx.constructor.name === 'WebGLRenderingContext' ? 3 : 2\n\n    _beginPath = _ctx.beginPath.bind(_ctx)\n    _moveTo = _ctx.moveTo.bind(_ctx)\n    _lineTo = _ctx.lineTo.bind(_ctx)\n    _closePath = _ctx.closePath.bind(_ctx)\n  } else {\n    throw new Error('[p5.bezier] Canvas is not supported.')\n  }\n\n  _strict = strictMode // Always check and throw errors or not\n}\n\nexport function newBezier(pointList, closeType = 'OPEN', accuracy = 6) {\n  if (_strict && !Array.isArray(pointList))\n    throw new Error(\n      `[p5.bezier] newBezier() function expects an array, got ${typeof pointList}.`\n    )\n\n  // Define the increment of t based on accuracy\n  const tIncrement = p5bezierAccuracyListAll[accuracy]\n\n  if (_dimension !== 0) {\n    // Check if all points are valid\n    if (_strict)\n      for (let point of pointList)\n        if (!Array.isArray(pointList) || point.length !== _dimension)\n          throw new Error(\n            '[p5.bezier] One or more points in the array are not input correctly.'\n          )\n\n    // Add the first point as the last point to close the curve\n    if (closeType === 'CLOSE') pointList.push(pointList[0])\n    let p = pointList.length // pointList has p points for (p - 1) degree curves\n    let n = p - 1\n\n    _beginPath()\n    _moveTo(...pointList[0])\n    // Are we drawing 2D or 3D curves\n    if (_dimension === 2) {\n      // 2-Dimensional bezier curve\n      let x, y, t, i\n      for (t = 0; t <= 1; t += tIncrement) {\n        x = 0\n        y = 0\n        for (i = 0; i <= n; i++) {\n          // i point in pointList\n          x +=\n            (_helper_factorial(n) /\n              (_helper_factorial(i) * _helper_factorial(n - i))) *\n            Math.pow(1 - t, n - i) *\n            Math.pow(t, i) *\n            pointList[i][0]\n          y +=\n            (_helper_factorial(n) /\n              (_helper_factorial(i) * _helper_factorial(n - i))) *\n            Math.pow(1 - t, n - i) *\n            Math.pow(t, i) *\n            pointList[i][1]\n        }\n        _lineTo(x, y)\n      }\n      _lineTo(...pointList.slice(-1)[0])\n    } else if (_dimension === 3) {\n      // 3-Dimensional bezier curve\n      let xyz = [0, 0, 0],\n        t,\n        i,\n        d\n      for (t = 0; t <= 1; t += tIncrement) {\n        xyz = [0, 0, 0]\n        for (i = 0; i <= n; i++) {\n          for (d = 0; d < 3; d++) {\n            xyz[d] +=\n              (_helper_factorial(n) /\n                (_helper_factorial(i) * _helper_factorial(n - i))) *\n              Math.pow(1 - t, n - i) *\n              Math.pow(t, i) *\n              pointList[i][d]\n          }\n        }\n        _lineTo(...xyz)\n      }\n      _lineTo(...pointList.slice(-1)[0])\n    }\n\n    if (_useP5) _closePath(closeType)\n    else if (closeType === 'CLOSE') _closePath()\n    else if (_strict && closeType !== 'OPEN')\n      throw new Error(\n        '[p5.bezier] Close type error. A bezier curve can only be either OPEN or CLOSE.'\n      )\n\n    _helper_style()\n\n    return\n  }\n}\n\nexport function newBezierObj(pointList, closeType = 'OPEN', accuracy = 6) {\n  // Define the increment of t based on accuracy\n  const tIncrement = p5bezierAccuracyListAll[accuracy]\n\n  if (_strict && !Array.isArray(pointList))\n    throw new Error(\n      `[p5.bezier] newBezierObj() function expects an array, got ${typeof pointList}.`\n    )\n\n  // Check if all points are valid\n  if (_strict)\n    for (let point of pointList)\n      if (!Array.isArray(pointList) || point.length !== _dimension)\n        throw new Error(\n          '[p5.bezier] One or more points in the array are not input correctly.'\n        )\n\n  // All checks done\n  let bObj = new BezierCurve(pointList, closeType, tIncrement, _dimension)\n  return bObj\n}\n\nfunction _helper_factorial(a) {\n  // Factorial function for binomial coefficient calculation\n  return a > 1 ? a * _helper_factorial(a - 1) : 1\n}\n\nfunction _helper_dist() {\n  if (arguments.length === 4)\n    return Math.hypot(arguments[0] - arguments[2], arguments[1] - arguments[3])\n  else if (arguments.length === 6)\n    return Math.hypot(\n      arguments[0] - arguments[3],\n      arguments[1] - arguments[4],\n      arguments[2] - arguments[5]\n    )\n  return 0\n}\n\nfunction _helper_style() {\n  if (_canvas._doFill) _ctx.fill()\n  if (_canvas._doStroke) _ctx.stroke()\n}\n\nclass BezierCurve {\n  // Take pointList, closeType, tIncrement, bezierDimension into constructor\n  constructor(pL, closeT, tI, bD, vL = null) {\n    if (_strict && bD !== 2 && bD !== 3)\n      throw new Error(\n        `Dimension error. The bezier curve is ${bD}-dimensional and doesn't belong to our world.`\n      )\n\n    this.controlPoints = pL\n\n    if (closeT === 'CLOSE') {\n      this.controlPoints.push(pL[0])\n      this.closeType = 'CLOSE'\n    } else if (closeT === 'OPEN') {\n      this.closeType = 'OPEN'\n    } else {\n      throw new Error(\n        '[p5.bezier] Close type error. A bezier curve can only be either OPEN or CLOSE.'\n      )\n    }\n\n    this.dimension = bD\n    this.increment = tI\n    this.vertexList = []\n    this.vertexListLen = 0\n    this.p = this.controlPoints.length // Has p points for (p - 1) degree curves\n    this.n = this.p - 1 // Degree\n    // Calculate thr vertex\n    if (vL === null) {\n      this._buildVertexList()\n    } else {\n      this.vertexList = vL\n      this.vertexListLen = this.vertexList.length\n    }\n  }\n\n  _buildVertexList() {\n    /*\n    Return vertexList\n    */\n    this.vertexList = []\n    if (this.dimension === 2) {\n      // 2-Dimensional bezier curve\n      let x, y, t, i\n      for (t = 0; t <= 1; t += this.increment) {\n        x = 0\n        y = 0\n        for (i = 0; i <= this.n; i++) {\n          // i point in pointList\n          x +=\n            (_helper_factorial(this.n) /\n              (_helper_factorial(i) * _helper_factorial(this.n - i))) *\n            Math.pow(1 - t, this.n - i) *\n            Math.pow(t, i) *\n            this.controlPoints[i][0]\n          y +=\n            (_helper_factorial(this.n) /\n              (_helper_factorial(i) * _helper_factorial(this.n - i))) *\n            Math.pow(1 - t, this.n - i) *\n            Math.pow(t, i) *\n            this.controlPoints[i][1]\n        }\n        this.vertexList.push([x, y])\n      }\n    } else if (this.dimension === 3) {\n      // 3-Dimensional bezier curve\n      let xyz = [0, 0, 0],\n        t,\n        i,\n        d\n      for (t = 0; t <= 1; t += this.increment) {\n        xyz[0] = 0\n        xyz[1] = 0\n        xyz[2] = 0\n        for (i = 0; i <= this.n; i++) {\n          for (d = 0; d < 3; d++) {\n            xyz[d] +=\n              (_helper_factorial(this.n) /\n                (_helper_factorial(i) * _helper_factorial(this.n - i))) *\n              Math.pow(1 - t, this.n - i) *\n              Math.pow(t, i) *\n              this.controlPoints[i][d]\n          }\n        }\n        this.vertexList.push(xyz)\n      }\n    }\n    // Ending fix\n    this._addVertex(this.controlPoints.slice(-1)[0])\n\n    this.dimension = this.vertexList[0].length // Update dimension\n    this.vertexListLen = this.vertexList.length // Update vertexListLen\n    return this.vertexList\n  }\n\n  _addVertex(vArray) {\n    // vArray is an array of [x, y] position or [x, y, z] position\n    if (this.dimension === 2 || this.dimension === 3) _lineTo(...vArray)\n    else throw new Error('Vertices can only be in 2D or 3D space.')\n  }\n\n  _distVertex(vArray1, vArray2) {\n    // Calculate the distance between\n    // vertex_array_1 and vertex_array_2\n    if (this.dimension === 2) {\n      return _helper_dist(vArray1[0], vArray1[1], vArray2[0], vArray2[1])\n    } else if (this.dimension === 3) {\n      return _helper_dist(\n        vArray1[0],\n        vArray1[1],\n        vArray1[2],\n        vArray2[0],\n        vArray2[1],\n        vArray2[2]\n      )\n    }\n  }\n\n  draw(dash) {\n    if (!dash) {\n      _beginPath()\n      for (let v of this.vertexList) {\n        this._addVertex(v)\n      }\n\n      if (this.closeType === 'CLOSE') _ctx.closePath()\n\n      if (_useP5) _closePath(this.closeType)\n      else if (this.closeType === 'CLOSE') _closePath()\n\n      _helper_style()\n    } else if (\n      Array.isArray(dash) &&\n      dash.length === 2 &&\n      this.increment <= 0.008\n    ) {\n      // Draw a dash curve\n      let solidPart = Math.abs(dash[0]) // Length of one solid part\n      let onePart = solidPart + Math.abs(dash[1]),\n        nowLen = 0,\n        modOnePart = 0\n      let lastVertex = this.vertexList[0]\n      let solid = true // true draw, false break\n\n      _ctx.save() // push\n      _ctx.fillStyle = 'rgba(0, 0, 0, 0)' // TODO: Enable fill\n      _beginPath()\n      _moveTo(...this.vertexList[0])\n      for (let v = 1; v < this.vertexListLen; v++) {\n        nowLen += this._distVertex(lastVertex, this.vertexList[v])\n        modOnePart = nowLen % onePart\n        if (modOnePart <= solidPart && solid) {\n          this._addVertex(this.vertexList[v])\n        } else if (modOnePart > solidPart && modOnePart <= onePart && solid) {\n          // endShape()\n          solid = false\n        } else if (modOnePart <= solidPart && !solid) {\n          _moveTo(...this.vertexList[v])\n          solid = true\n        }\n        lastVertex = this.vertexList[v]\n      }\n      // if (solid) {\n      //   // Shape didn't end\n      //   endShape()\n      // }\n      _helper_style()\n      _ctx.restore()\n    } else if (this.increment > 0.008)\n      throw new Error(\n        'Fidelity is too low for a dash line. It should be at least 6.'\n      )\n    else\n      throw new Error(\n        \"Your dash array input is not valid. Make sure it's an array of two numbers.\"\n      )\n  }\n\n  update(newControlList) {\n    /*\n    Update the vertexList when control points change\n    */\n    if (newControlList.length !== this.controlPoints.length) {\n      throw new Error(\n        'The number of points changed. (Keep the length of the point array the same.)'\n      )\n    } else if (equalArrays(this.controlPoints, newControlList)) {\n      // Do we really need to update? No.\n      // return ;\n    } else {\n      this.controlPoints = newControlList\n      this._buildVertexList()\n    }\n  }\n\n  move(x, y, z = null, toDraw = true, dash = 0) {\n    /*\n    Move the curve to another place\n    Return a new object\n    */\n    if (z === null && this.dimension === 3) {\n      // A 3D curve treated as 2D error\n      throw new Error('To move a 3D curve, please specify (x, y, z).')\n    } else {\n      let toMove = [x, y]\n      if (z !== null) toMove.push(z)\n      // Copy to a new object\n      let newCurveV = []\n      for (let i = 0; i < this.vertexListLen; i++)\n        newCurveV.push(this.vertexList[i].slice())\n      let newCurveObj = new BezierCurve(\n        this.controlPoints,\n        this.closeType,\n        this.increment,\n        this.dimension,\n        newCurveV\n      )\n      // Move\n      for (let i = 0; i < newCurveObj.vertexListLen; i++) {\n        for (let j = 0; j < newCurveObj.dimension; j++) {\n          newCurveObj.vertexList[i][j] += toMove[j]\n        }\n      }\n      if (toDraw) {\n        newCurveObj.draw(dash)\n      }\n      return newCurveObj\n    }\n  }\n\n  shortest(pX, pY, pZ = 0) {\n    // Return the point on curve that is closest to the point outside\n    // Always return array length of 3\n    // Last position (z) be 0 for all 2D calculation\n    let dMin = -1,\n      nowMin = 0\n    let minVertex\n    for (let v of this.vertexList) {\n      if (dMin === -1) {\n        dMin = this._distVertex(v, [pX, pY, pZ])\n        minVertex = v\n      } else {\n        nowMin = this._distVertex(v, [pX, pY, pZ])\n        if (dMin > nowMin) {\n          dMin = nowMin\n          minVertex = v\n        }\n      }\n    }\n    return minVertex // An array of vertex position\n  }\n}\n\n/* --------------------------------- HELPERS -------------------------------- */\n\n// https://www.30secondsofcode.org/blog/s/javascript-array-comparison\nconst equalArrays = (a, b) =>\n  a.length === b.length && a.every((v, i) => v === b[i])\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","p5bezierAccuracyListAll","_canvas","_ctx","_dimension","_strict","_useP5","_beginPath","_moveTo","_lineTo","_closePath","initBezier","canvas","strictMode","drawingContext","p5","Graphics","constructor","name","beginShape","vertex","endShape","Renderer","Error","window","console","warn","isP3D","beginPath","bind","moveTo","lineTo","closePath","newBezier","pointList","closeType","accuracy","Array","isArray","tIncrement","point","length","push","n","x","y","t","i","_helper_factorial","Math","pow","slice","d","xyz","_helper_style","newBezierObj","BezierCurve","a","_helper_dist","arguments","hypot","_doFill","fill","_doStroke","stroke","pL","closeT","tI","bD","vL","controlPoints","dimension","increment","vertexList","vertexListLen","p","_buildVertexList","_addVertex","vArray","_distVertex","vArray1","vArray2","draw","dash","solidPart","abs","onePart","nowLen","modOnePart","lastVertex","solid","save","fillStyle","v","restore","update","newControlList","equalArrays","move","z","toDraw","toMove","newCurveV","newCurveObj","j","shortest","pX","pY","pZ","minVertex","dMin","nowMin","b","every"],"sourceRoot":""}